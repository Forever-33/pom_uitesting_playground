{"name": "Client Side Delay", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for MicrosoftEdge; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location", "trace": "self = <selenium.webdriver.common.driver_finder.DriverFinder object at 0x11048ccd0>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n>               output = SeleniumManager().binary_paths(self._to_args())\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/common/driver_finder.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/selenium/webdriver/common/selenium_manager.py:55: in binary_paths\n    return self._run(args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ['/Users/ivanvoronov/PycharmProjects/pom_uitesting_playground/.venv/lib/python3.10/site-packages/selenium/webdriver/common/macos/selenium-manager', '--browser', 'MicrosoftEdge', '--language-binding', 'python', '--output', ...]\n\n    @staticmethod\n    def _run(args: List[str]) -> dict:\n        \"\"\"Executes the Selenium Manager Binary.\n    \n        :Args:\n         - args: the components of the command being executed.\n        :Returns: The log string containing the driver location.\n        \"\"\"\n        command = \" \".join(args)\n        logger.debug(\"Executing process: %s\", command)\n        try:\n            if sys.platform == \"win32\":\n                completed_proc = subprocess.run(args, capture_output=True, creationflags=subprocess.CREATE_NO_WINDOW)\n            else:\n                completed_proc = subprocess.run(args, capture_output=True)\n            stdout = completed_proc.stdout.decode(\"utf-8\").rstrip(\"\\n\")\n            stderr = completed_proc.stderr.decode(\"utf-8\").rstrip(\"\\n\")\n            output = json.loads(stdout) if stdout != \"\" else {\"logs\": [], \"result\": {}}\n        except Exception as err:\n            raise WebDriverException(f\"Unsuccessful command executed: {command}\") from err\n    \n        SeleniumManager._process_logs(output[\"logs\"])\n        result = output[\"result\"]\n        if completed_proc.returncode:\n>           raise WebDriverException(\n                f\"Unsuccessful command executed: {command}; code: {completed_proc.returncode}\\n{result}\\n{stderr}\"\n            )\nE           selenium.common.exceptions.WebDriverException: Message: Unsuccessful command executed: /Users/ivanvoronov/PycharmProjects/pom_uitesting_playground/.venv/lib/python3.10/site-packages/selenium/webdriver/common/macos/selenium-manager --browser MicrosoftEdge --language-binding python --output json; code: 65\nE           {'code': 65, 'message': 'Error parsing JSON from URL https://edgeupdates.microsoft.com/api/products/ missing field `ArtifactName` at line 1 column 467', 'driver_path': '', 'browser_path': ''}\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/common/selenium_manager.py:129: WebDriverException\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <SubRequest 'driver' for <Function test_client_side_delay_page[edge]>>\n\n    @pytest.fixture(scope=\"function\", autouse=True, params=[\"chrome\", \"firefox\", \"edge\"])\n    def driver(request):\n        browser = request.param\n        if browser == \"chrome\":\n            options = ChromeOptions()\n            options.add_argument(\"--no-sandbox\")\n            options.add_argument(\"--disable-dev-shm-usage\")\n            options.add_argument(\"--window-size=1920x1080\")\n            driver = webdriver.Chrome(options=options)\n        elif browser == \"firefox\":\n            options = FirefoxOptions()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"--no-sandbox\")\n            options.add_argument(\"--disable-dev-shm-usage\")\n            options.add_argument(\"--window-size=1920x1080\")\n            driver = webdriver.Firefox(options=options)\n        elif browser == \"edge\":\n            options = EdgeOptions()\n            options.add_argument(\"--no-sandbox\")\n            options.add_argument(\"--disable-dev-shm-usage\")\n            options.add_argument(\"--window-size=1920x1080\")\n>           driver = webdriver.Edge(options=options)\n\nconftest.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.10/site-packages/selenium/webdriver/edge/webdriver.py:45: in __init__\n    super().__init__(\n.venv/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:50: in __init__\n    if finder.get_browser_path():\n.venv/lib/python3.10/site-packages/selenium/webdriver/common/driver_finder.py:47: in get_browser_path\n    return self._binary_paths()[\"browser_path\"]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.common.driver_finder.DriverFinder object at 0x11048ccd0>\n\n    def _binary_paths(self) -> dict:\n        if self._paths[\"driver_path\"]:\n            return self._paths\n    \n        browser = self._options.capabilities[\"browserName\"]\n        try:\n            path = self._service.path\n            if path:\n                logger.debug(\n                    \"Skipping Selenium Manager; path to %s driver specified in Service class: %s\", browser, path\n                )\n                if not Path(path).is_file():\n                    raise ValueError(f\"The path is not a valid file: {path}\")\n                self._paths[\"driver_path\"] = path\n            else:\n                output = SeleniumManager().binary_paths(self._to_args())\n                if Path(output[\"driver_path\"]).is_file():\n                    self._paths[\"driver_path\"] = output[\"driver_path\"]\n                else:\n                    raise ValueError(f'The driver path is not a valid file: {output[\"driver_path\"]}')\n                if Path(output[\"browser_path\"]).is_file():\n                    self._paths[\"browser_path\"] = output[\"browser_path\"]\n                else:\n                    raise ValueError(f'The browser path is not a valid file: {output[\"browser_path\"]}')\n        except Exception as err:\n            msg = f\"Unable to obtain driver for {browser}\"\n>           raise NoSuchDriverException(msg) from err\nE           selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for MicrosoftEdge; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\n.venv/lib/python3.10/site-packages/selenium/webdriver/common/driver_finder.py:78: NoSuchDriverException"}, "parameters": [{"name": "driver", "value": "'edge'"}], "start": 1735399675806, "stop": 1735399675806, "uuid": "0f48cfaf-d261-454b-a8d8-a253b7532a55", "testCaseId": "642b01c7fa2ecf78790dc64818340326", "fullName": "tests.test_features_ui_playground.TestFeaturesUiPlayground#test_client_side_delay_page"}